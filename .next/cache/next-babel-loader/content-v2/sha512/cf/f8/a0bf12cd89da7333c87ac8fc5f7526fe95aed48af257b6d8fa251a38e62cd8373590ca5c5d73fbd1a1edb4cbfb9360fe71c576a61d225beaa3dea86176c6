{"ast":null,"code":"import _slicedToArray from \"/opt/lampp/htdocs/fuvestlivrosquiz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/opt/lampp/htdocs/fuvestlivrosquiz/pages/quiz.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction ResultWidget(_ref) {\n  var _this = this;\n\n  var results = _ref.results;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"Tela de Resultados\")), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"Voc\\xEA acertou\", results.reduce(function (somatoriaAtual, resultAtual) {\n    var isAcerto = resultAtual === true;\n\n    if (isAcerto) {\n      return somatoriaAtual + 1;\n    }\n\n    return somatoriaAtual;\n  }, 0), \"perguntas\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, results.map(function (result) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, \"#01 Resultados:\", result === true ? 'Acertou' : 'Errou');\n  }))));\n}\n\n_c = ResultWidget;\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"[Desafio do Loading]\"));\n}\n\n_c2 = LoadingWidget;\n\nfunction QuestionWidget(_ref2) {\n  _s();\n\n  var _this2 = this;\n\n  var question = _ref2.question,\n      questionIndex = _ref2.questionIndex,\n      totalQuestions = _ref2.totalQuestions,\n      _onSubmit = _ref2.onSubmit;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedAlternative = _React$useState2[0],\n      setSelectedAlternative = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isQuestionSubmitted = _React$useState4[0],\n      setIsQuestionSubmitted = _React$useState4[1];\n\n  var questionId = \"question__\".concat(questionIndex);\n  var isCorrect = selectedAlternative === question.answer;\n  var hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: function onSubmit(infosDoEvento) {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmitted(true);\n      setTimeout(function () {\n        setIsQuestionSubmitted(false);\n\n        _onSubmit();\n\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      // style={{ display: 'none' }}\n      id: alternativeId,\n      name: questionId,\n      onChange: function onChange() {\n        return setSelectedAlternative(alternativeIndex);\n      },\n      type: \"radio\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmitted && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 48\n    }\n  }, \"Voc\\xEA acertou!\"), isQuestionSubmitted && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 49\n    }\n  }, \"Voc\\xEA errou!\"))));\n}\n\n_s(QuestionWidget, \"vzNmh5CEAJejJc1DKxomGBGYevs=\");\n\n_c3 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  _s2();\n\n  var _React$useState5 = React.useState(screenStates.RESULT),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      screenState = _React$useState6[0],\n      setScreenState = _React$useState6[1];\n\n  var _React$useState7 = React.useState([true, false, true]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      results = _React$useState8[0],\n      setResults = _React$useState8[1];\n\n  var totalQuestions = db.questions.length;\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      currentQuestion = _React$useState10[0],\n      setCurrentQuestion = _React$useState10[1];\n\n  var questionIndex = currentQuestion;\n  var question = db.questions[questionIndex]; // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  // nasce === didMount\n\n  React.useEffect(function () {\n    // fetch() ...\n    setTimeout(function () {// setScreenState(screenStates.QUIZ);\n    }, 1 * 1000); // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 49\n    }\n  })));\n}\n\n_s2(QuizPage, \"61m3UCqB3uJYaoJtx0+na8DIZHA=\");\n\n_c4 = QuizPage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ResultWidget\");\n$RefreshReg$(_c2, \"LoadingWidget\");\n$RefreshReg$(_c3, \"QuestionWidget\");\n$RefreshReg$(_c4, \"QuizPage\");","map":{"version":3,"sources":["/opt/lampp/htdocs/fuvestlivrosquiz/pages/quiz.js"],"names":["React","db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","ResultWidget","results","reduce","somatoriaAtual","resultAtual","isAcerto","map","result","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","useState","undefined","selectedAlternative","setSelectedAlternative","isQuestionSubmitted","setIsQuestionSubmitted","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","setResults","questions","length","currentQuestion","setCurrentQuestion","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction ResultWidget({ results }) {\n  return (\n    <Widget>\n      <Widget.Header>\n        <h1>Tela de Resultados</h1>\n      </Widget.Header>\n\n      <Widget.Content>\n        <p>\n          Você acertou \n          {results.reduce((somatoriaAtual, resultAtual) => {\n            const isAcerto = resultAtual === true;\n            if (isAcerto) {\n              return somatoriaAtual + 1;\n            }\n            return somatoriaAtual;\n          }, 0)}\n          perguntas\n        </p>\n        <ul>\n          {results.map((result) => (\n            <li>\n              #01 Resultados:\n              {result === true\n              ? 'Acertou'\n              : 'Errou'}\n            </li>\n          ))}\n        </ul>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction LoadingWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content>\n        [Desafio do Loading]\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmitted, setIsQuestionSubmitted] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n\n  return (\n    <Widget>\n      <Widget.Header>\n        {/* <BackLinkArrow href=\"/\" /> */}\n        <h3>\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\n        </h3>\n      </Widget.Header>\n\n      <img\n        alt=\"Descrição\"\n        style={{\n          width: '100%',\n          height: '150px',\n          objectFit: 'cover',\n        }}\n        src={question.image}\n      />\n      <Widget.Content>\n        <h2>\n          {question.title}\n        </h2>\n        <p>\n          {question.description}\n        </p>\n\n        <form\n          onSubmit={(infosDoEvento) => {\n            infosDoEvento.preventDefault();\n            setIsQuestionSubmitted(true);\n            setTimeout(() => {\n              setIsQuestionSubmitted(false);\n              onSubmit();\n              setSelectedAlternative(undefined);\n            }, 3 * 1000);\n          }}\n        >\n          {question.alternatives.map((alternative, alternativeIndex) => {\n            const alternativeId = `alternative__${alternativeIndex}`;\n            return (\n              <Widget.Topic\n                as=\"label\"\n                key={alternativeId}\n                htmlFor={alternativeId}\n              >\n                <input\n                  // style={{ display: 'none' }}\n                  id={alternativeId}\n                  name={questionId}\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\n                  type=\"radio\"\n                />\n                {alternative}\n              </Widget.Topic>\n            );\n          })}\n\n          {/* <pre>\n            {JSON.stringify(question, null, 4)}\n          </pre> */}\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n            Confirmar\n          </Button>\n          {isQuestionSubmitted && isCorrect && <p>Você acertou!</p>}\n          {isQuestionSubmitted && !isCorrect && <p>Você errou!</p>}\n        </form>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT',\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.RESULT);\n  const [results, setResults] = React.useState([true, false, true]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex];\n\n  // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  // nasce === didMount\n\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      // setScreenState(screenStates.QUIZ);\n    }, 1 * 1000);\n  // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return (\n    <QuizBackground backgroundImage={db.bg}>\n      <QuizContainer>\n        <QuizLogo />\n        {screenState === screenStates.QUIZ && (\n          <QuestionWidget\n            question={question}\n            questionIndex={questionIndex}\n            totalQuestions={totalQuestions}\n            onSubmit={handleSubmitQuiz}\n          />\n        )}\n\n        {screenState === screenStates.LOADING && <LoadingWidget />}\n\n        {screenState === screenStates.RESULT && <ResultWidget results={results} />}\n\n        {/* {screenState === screenStates.RESULT &&\n        <div>Você acertou X questões, parabéns!</div>} */}\n\n      </QuizContainer>\n    </QuizBackground>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}