{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/fuvestlivrosquiz/pages/quiz.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction ResultWidget({\n  results\n}) {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"Tela de Resultados\")), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, 'VocÃª acertou ', results.reduce((somatoriaAtual, resultAtual) => {\n    const isAcerto = resultAtual === true;\n\n    if (isAcerto) {\n      return somatoriaAtual + 1;\n    }\n\n    return somatoriaAtual;\n  }, 0), \"perguntas\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, results.map((result, index) => __jsx(\"li\", {\n    key: `result__${result}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"#\", index + 1, ' ', \"Resultado:\", result === true ? ' Acertou' : ' Errou')))));\n}\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"[Desafio do Loading]\"));\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmitted, setIsQuestionSubmitted] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, `Pergunta ${questionIndex + 1} de ${totalQuestions}`)), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: infosDoEvento => {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmitted(true);\n      setTimeout(() => {\n        addResult(isCorrect);\n        setIsQuestionSubmitted(false);\n        onSubmit();\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, question.alternatives.map((alternative, alternativeIndex) => {\n    const alternativeId = `alternative__${alternativeIndex}`;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: () => setSelectedAlternative(alternativeIndex),\n      type: \"radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmitted && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 48\n    }\n  }, \"Voc\\xEA acertou!\"), isQuestionSubmitted && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 49\n    }\n  }, \"Voc\\xEA errou!\"))));\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex];\n\n  function addResult(result) {\n    setResults([...results, result]);\n  } // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  // nasce === didMount\n\n\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000); // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResult: addResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 49\n    }\n  })));\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/fuvestlivrosquiz/pages/quiz.js"],"names":["React","db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","ResultWidget","results","reduce","somatoriaAtual","resultAtual","isAcerto","map","result","index","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","addResult","selectedAlternative","setSelectedAlternative","useState","undefined","isQuestionSubmitted","setIsQuestionSubmitted","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","display","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","setResults","questions","length","currentQuestion","setCurrentQuestion","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction ResultWidget({ results }) {\n  return (\n    <Widget>\n      <Widget.Header>\n        <h1>Tela de Resultados</h1>\n      </Widget.Header>\n\n      <Widget.Content>\n        <p>\n          {'VocÃª acertou '}\n          {results.reduce((somatoriaAtual, resultAtual) => {\n            const isAcerto = resultAtual === true;\n            if (isAcerto) {\n              return somatoriaAtual + 1;\n            }\n            return somatoriaAtual;\n          }, 0)}\n          perguntas\n        </p>\n        <ul>\n          {results.map((result, index) => (\n            <li key={`result__${result}`}>\n              #\n              {index + 1}\n              {' '}\n              Resultado:\n              {result === true\n                ? ' Acertou'\n                : ' Errou'}\n            </li>\n          ))}\n        </ul>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction LoadingWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content>\n        [Desafio do Loading]\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult,\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmitted, setIsQuestionSubmitted] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n\n  return (\n    <Widget>\n      <Widget.Header>\n        {/* <BackLinkArrow href=\"/\" /> */}\n        <h3>\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\n        </h3>\n      </Widget.Header>\n\n      <img\n        alt=\"DescriÃ§Ã£o\"\n        style={{\n          width: '100%',\n          height: '150px',\n          objectFit: 'cover',\n        }}\n        src={question.image}\n      />\n      <Widget.Content>\n        <h2>\n          {question.title}\n        </h2>\n        <p>\n          {question.description}\n        </p>\n\n        <form\n          onSubmit={(infosDoEvento) => {\n            infosDoEvento.preventDefault();\n            setIsQuestionSubmitted(true);\n            setTimeout(() => {\n              addResult(isCorrect);\n              setIsQuestionSubmitted(false);\n              onSubmit();\n              setSelectedAlternative(undefined);\n            }, 3 * 1000);\n          }}\n        >\n          {question.alternatives.map((alternative, alternativeIndex) => {\n            const alternativeId = `alternative__${alternativeIndex}`;\n            return (\n              <Widget.Topic\n                as=\"label\"\n                key={alternativeId}\n                htmlFor={alternativeId}\n              >\n                <input\n                  style={{ display: 'none' }}\n                  id={alternativeId}\n                  name={questionId}\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\n                  type=\"radio\"\n                />\n                {alternative}\n              </Widget.Topic>\n            );\n          })}\n\n          {/* <pre>\n            {JSON.stringify(question, null, 4)}\n          </pre> */}\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n            Confirmar\n          </Button>\n          {isQuestionSubmitted && isCorrect && <p>VocÃª acertou!</p>}\n          {isQuestionSubmitted && !isCorrect && <p>VocÃª errou!</p>}\n        </form>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT',\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex];\n\n  function addResult(result) {\n    setResults([\n      ...results,\n      result,\n    ]);\n  }\n\n  // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  // nasce === didMount\n\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 1000);\n  // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return (\n    <QuizBackground backgroundImage={db.bg}>\n      <QuizContainer>\n        <QuizLogo />\n        {screenState === screenStates.QUIZ && (\n          <QuestionWidget\n            question={question}\n            questionIndex={questionIndex}\n            totalQuestions={totalQuestions}\n            onSubmit={handleSubmitQuiz}\n            addResult={addResult}\n          />\n        )}\n\n        {screenState === screenStates.LOADING && <LoadingWidget />}\n\n        {screenState === screenStates.RESULT && <ResultWidget results={results} />}\n\n        {/* {screenState === screenStates.RESULT &&\n        <div>VocÃª acertou X questÃµes, parabÃ©ns!</div>} */}\n\n      </QuizContainer>\n    </QuizBackground>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}