{"ast":null,"code":"import _toConsumableArray from \"/opt/lampp/htdocs/fuvestlivrosquiz/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/opt/lampp/htdocs/fuvestlivrosquiz/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/opt/lampp/htdocs/fuvestlivrosquiz/src/screens/Quiz/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Lottie from 'react-lottie'; // import db from '../../../db.json';\n\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativesForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BackLinkArrow';\nimport loadingAnimation from './animations/loading.json';\n\nfunction ResultWidget(_ref) {\n  var _this = this;\n\n  var results = _ref.results;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Tela de Resultado:\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Voc\\xEA acertou\", ' ', results.filter(function (x) {\n    return x;\n  }).length, ' ', \"perguntas\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, results.map(function (result, index) {\n    return __jsx(\"li\", {\n      key: \"result__\".concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \"#\", index + 1, ' ', \"Resultado:\", result === true ? 'Acertou' : 'Errou');\n  }))));\n}\n\n_c = ResultWidget;\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(Lottie, {\n    width: \"200px\",\n    height: \"200px\",\n    className: \"lottie-container basic\",\n    config: {\n      animationData: loadingAnimation,\n      loop: true,\n      autoplay: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })));\n}\n\n_c2 = LoadingWidget;\n\nfunction QuestionWidget(_ref2) {\n  _s();\n\n  var _this2 = this;\n\n  var question = _ref2.question,\n      questionIndex = _ref2.questionIndex,\n      totalQuestions = _ref2.totalQuestions,\n      _onSubmit = _ref2.onSubmit,\n      addResult = _ref2.addResult;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedAlternative = _React$useState2[0],\n      setSelectedAlternative = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isQuestionSubmited = _React$useState4[0],\n      setIsQuestionSubmited = _React$useState4[1];\n\n  var questionId = \"question__\".concat(questionIndex);\n  var isCorrect = selectedAlternative === question.answer;\n  var hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(BackLinkArrow, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Pergunta \".concat(questionIndex + 1, \" de \").concat(totalQuestions))), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(AlternativesForm, {\n    onSubmit: function onSubmit(infosDoEvento) {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmited(true);\n      setTimeout(function () {\n        addResult(isCorrect);\n\n        _onSubmit();\n\n        setIsQuestionSubmited(false);\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, question.alternatives.map(function (alternative, alternativeIndex) {\n    var alternativeId = \"alternative__\".concat(alternativeIndex);\n    var alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n    var isSelected = selectedAlternative === alternativeIndex;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      \"data-selected\": isSelected,\n      \"data-status\": isQuestionSubmited && alternativeStatus,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      style: {\n        display: 'none'\n      },\n      id: alternativeId,\n      name: questionId,\n      onChange: function onChange() {\n        return setSelectedAlternative(alternativeIndex);\n      },\n      type: \"radio\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmited && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 47\n    }\n  }, \"Voc\\xEA acertou!\"), isQuestionSubmited && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 48\n    }\n  }, \"Voc\\xEA errou!\"))));\n}\n\n_s(QuestionWidget, \"gOPL1EmksK8wUP52KQZyVU1FVK0=\");\n\n_c3 = QuestionWidget;\nvar screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage(_ref3) {\n  _s2();\n\n  var externalQuestions = _ref3.externalQuestions,\n      externalBg = _ref3.externalBg;\n\n  var _React$useState5 = React.useState(screenStates.LOADING),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      screenState = _React$useState6[0],\n      setScreenState = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      results = _React$useState8[0],\n      setResults = _React$useState8[1];\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      currentQuestion = _React$useState10[0],\n      setCurrentQuestion = _React$useState10[1];\n\n  var questionIndex = currentQuestion;\n  var question = externalQuestions[questionIndex];\n  var totalQuestions = externalQuestions.length;\n  var bg = externalBg;\n\n  function addResult(result) {\n    // results.push(result);\n    setResults([].concat(_toConsumableArray(results), [result]));\n  } // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n\n\n  React.useEffect(function () {\n    // fetch() ...\n    setTimeout(function () {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000); // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    var nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    addResult: addResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 49\n    }\n  })));\n}\n\n_s2(QuizPage, \"op6a2G6WeNFK4t0JnGKr98IrMhU=\");\n\n_c4 = QuizPage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ResultWidget\");\n$RefreshReg$(_c2, \"LoadingWidget\");\n$RefreshReg$(_c3, \"QuestionWidget\");\n$RefreshReg$(_c4, \"QuizPage\");","map":{"version":3,"sources":["/opt/lampp/htdocs/fuvestlivrosquiz/src/screens/Quiz/index.js"],"names":["React","Lottie","Widget","QuizLogo","QuizBackground","QuizContainer","AlternativesForm","Button","BackLinkArrow","loadingAnimation","ResultWidget","results","filter","x","length","map","result","index","LoadingWidget","display","justifyContent","animationData","loop","autoplay","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","addResult","useState","undefined","selectedAlternative","setSelectedAlternative","isQuestionSubmited","setIsQuestionSubmited","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","alternative","alternativeIndex","alternativeId","alternativeStatus","isSelected","screenStates","QUIZ","LOADING","RESULT","QuizPage","externalQuestions","externalBg","screenState","setScreenState","setResults","currentQuestion","setCurrentQuestion","bg","useEffect","handleSubmitQuiz","nextQuestion"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Lottie from 'react-lottie';\n// import db from '../../../db.json';\nimport Widget from '../../components/Widget';\nimport QuizLogo from '../../components/QuizLogo';\nimport QuizBackground from '../../components/QuizBackground';\nimport QuizContainer from '../../components/QuizContainer';\nimport AlternativesForm from '../../components/AlternativesForm';\nimport Button from '../../components/Button';\nimport BackLinkArrow from '../../components/BackLinkArrow';\n\nimport loadingAnimation from './animations/loading.json';\n\nfunction ResultWidget({ results }) {\n  return (\n    <Widget>\n      <Widget.Header>\n        Tela de Resultado:\n      </Widget.Header>\n\n      <Widget.Content>\n        <p>\n          Você acertou\n          {' '}\n          {/* {results.reduce((somatoriaAtual, resultAtual) => {\n            const isAcerto = resultAtual === true;\n            if (isAcerto) {\n              return somatoriaAtual + 1;\n            }\n            return somatoriaAtual;\n          }, 0)} */}\n          {results.filter((x) => x).length}\n          {' '}\n          perguntas\n        </p>\n        <ul>\n          {results.map((result, index) => (\n            <li key={`result__${index}`}>\n              #\n              {index + 1}\n              {' '}\n              Resultado:\n              {result === true\n                ? 'Acertou'\n                : 'Errou'}\n            </li>\n          ))}\n        </ul>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction LoadingWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content style={{ display: 'flex', justifyContent: 'center' }}>\n        <Lottie\n          width=\"200px\"\n          height=\"200px\"\n          className=\"lottie-container basic\"\n          config={{ animationData: loadingAnimation, loop: true, autoplay: true }}\n        />\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n  addResult,\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmited, setIsQuestionSubmited] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n\n  return (\n    <Widget>\n      <Widget.Header>\n        <BackLinkArrow href=\"/\" />\n        <h3>\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\n        </h3>\n      </Widget.Header>\n\n      <img\n        alt=\"Descrição\"\n        style={{\n          width: '100%',\n          height: '150px',\n          objectFit: 'cover',\n        }}\n        src={question.image}\n      />\n      <Widget.Content>\n        <h2>\n          {question.title}\n        </h2>\n        <p>\n          {question.description}\n        </p>\n\n        <AlternativesForm\n          onSubmit={(infosDoEvento) => {\n            infosDoEvento.preventDefault();\n            setIsQuestionSubmited(true);\n            setTimeout(() => {\n              addResult(isCorrect);\n              onSubmit();\n              setIsQuestionSubmited(false);\n              setSelectedAlternative(undefined);\n            }, 3 * 1000);\n          }}\n        >\n          {question.alternatives.map((alternative, alternativeIndex) => {\n            const alternativeId = `alternative__${alternativeIndex}`;\n            const alternativeStatus = isCorrect ? 'SUCCESS' : 'ERROR';\n            const isSelected = selectedAlternative === alternativeIndex;\n            return (\n              <Widget.Topic\n                as=\"label\"\n                key={alternativeId}\n                htmlFor={alternativeId}\n                data-selected={isSelected}\n                data-status={isQuestionSubmited && alternativeStatus}\n              >\n                <input\n                  style={{ display: 'none' }}\n                  id={alternativeId}\n                  name={questionId}\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\n                  type=\"radio\"\n                />\n                {alternative}\n              </Widget.Topic>\n            );\n          })}\n\n          {/* <pre>\n            {JSON.stringify(question, null, 4)}\n          </pre> */}\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n            Confirmar\n          </Button>\n          {isQuestionSubmited && isCorrect && <p>Você acertou!</p>}\n          {isQuestionSubmited && !isCorrect && <p>Você errou!</p>}\n        </AlternativesForm>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT',\n};\nexport default function QuizPage({ externalQuestions, externalBg }) {\n  const [screenState, setScreenState] = React.useState(screenStates.LOADING);\n  const [results, setResults] = React.useState([]);\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = externalQuestions[questionIndex];\n  const totalQuestions = externalQuestions.length;\n  const bg = externalBg;\n\n  function addResult(result) {\n    // results.push(result);\n    setResults([\n      ...results,\n      result,\n    ]);\n  }\n\n  // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      setScreenState(screenStates.QUIZ);\n    }, 1 * 2000);\n  // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return (\n    <QuizBackground backgroundImage={bg}>\n      <QuizContainer>\n        <QuizLogo />\n        {screenState === screenStates.QUIZ && (\n          <QuestionWidget\n            question={question}\n            questionIndex={questionIndex}\n            totalQuestions={totalQuestions}\n            onSubmit={handleSubmitQuiz}\n            addResult={addResult}\n          />\n        )}\n\n        {screenState === screenStates.LOADING && <LoadingWidget />}\n\n        {screenState === screenStates.RESULT && <ResultWidget results={results} />}\n      </QuizContainer>\n    </QuizBackground>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}