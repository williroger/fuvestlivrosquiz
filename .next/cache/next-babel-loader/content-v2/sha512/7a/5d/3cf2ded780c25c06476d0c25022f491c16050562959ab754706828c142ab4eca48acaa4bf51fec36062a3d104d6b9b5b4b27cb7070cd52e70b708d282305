{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/fuvestlivrosquiz/pages/quiz.js\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction ResultWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"Voc\\xEA acertou X perguntas\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, \"Resultado\"))));\n}\n\nfunction LoadingWidget() {\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Carregando...\"), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"[Desafio do Loading]\"));\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmitted, setIsQuestionSubmitted] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n  return __jsx(Widget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(Widget.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, `Pergunta ${questionIndex + 1} de ${totalQuestions}`)), __jsx(\"img\", {\n    alt: \"Descri\\xE7\\xE3o\",\n    style: {\n      width: '100%',\n      height: '150px',\n      objectFit: 'cover'\n    },\n    src: question.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), __jsx(Widget.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, question.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, question.description), __jsx(\"form\", {\n    onSubmit: infosDoEvento => {\n      infosDoEvento.preventDefault();\n      setIsQuestionSubmitted(true);\n      setTimeout(() => {\n        setIsQuestionSubmitted(false);\n        onSubmit();\n        setSelectedAlternative(undefined);\n      }, 3 * 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, question.alternatives.map((alternative, alternativeIndex) => {\n    const alternativeId = `alternative__${alternativeIndex}`;\n    return __jsx(Widget.Topic, {\n      as: \"label\",\n      key: alternativeId,\n      htmlFor: alternativeId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      // style={{ display: 'none' }}\n      id: alternativeId,\n      name: questionId,\n      onChange: () => setSelectedAlternative(alternativeIndex),\n      type: \"radio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), alternative);\n  }), __jsx(Button, {\n    type: \"submit\",\n    disabled: !hasAlternativeSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Confirmar\"), isQuestionSubmitted && isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 48\n    }\n  }, \"Voc\\xEA acertou!\"), isQuestionSubmitted && !isCorrect && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 49\n    }\n  }, \"Voc\\xEA errou!\"))));\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT'\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.RESULT);\n  const [results, setResult] = React.useState([]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex]; // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  // nasce === didMount\n\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {// setScreenState(screenStates.QUIZ);\n    }, 1 * 1000); // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return __jsx(QuizBackground, {\n    backgroundImage: db.bg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, __jsx(QuizContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, __jsx(QuizLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), screenState === screenStates.QUIZ && __jsx(QuestionWidget, {\n    question: question,\n    questionIndex: questionIndex,\n    totalQuestions: totalQuestions,\n    onSubmit: handleSubmitQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }), screenState === screenStates.LOADING && __jsx(LoadingWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 50\n    }\n  }), screenState === screenStates.RESULT && __jsx(ResultWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 49\n    }\n  }), screenState === screenStates.RESULT && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 49\n    }\n  }, \"Voc\\xEA acertou X quest\\xF5es, parab\\xE9ns!\")));\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/fuvestlivrosquiz/pages/quiz.js"],"names":["React","db","Widget","QuizLogo","QuizBackground","QuizContainer","Button","ResultWidget","LoadingWidget","QuestionWidget","question","questionIndex","totalQuestions","onSubmit","selectedAlternative","setSelectedAlternative","useState","undefined","isQuestionSubmitted","setIsQuestionSubmitted","questionId","isCorrect","answer","hasAlternativeSelected","width","height","objectFit","image","title","description","infosDoEvento","preventDefault","setTimeout","alternatives","map","alternative","alternativeIndex","alternativeId","screenStates","QUIZ","LOADING","RESULT","QuizPage","screenState","setScreenState","results","setResult","questions","length","currentQuestion","setCurrentQuestion","useEffect","handleSubmitQuiz","nextQuestion","bg"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport db from '../db.json';\nimport Widget from '../src/components/Widget';\nimport QuizLogo from '../src/components/QuizLogo';\nimport QuizBackground from '../src/components/QuizBackground';\nimport QuizContainer from '../src/components/QuizContainer';\nimport Button from '../src/components/Button';\n\nfunction ResultWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content>\n        <p>Você acertou X perguntas</p>\n        <ul>\n          <li>\n            Resultado\n          </li>\n        </ul>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction LoadingWidget() {\n  return (\n    <Widget>\n      <Widget.Header>\n        Carregando...\n      </Widget.Header>\n\n      <Widget.Content>\n        [Desafio do Loading]\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nfunction QuestionWidget({\n  question,\n  questionIndex,\n  totalQuestions,\n  onSubmit,\n}) {\n  const [selectedAlternative, setSelectedAlternative] = React.useState(undefined);\n  const [isQuestionSubmitted, setIsQuestionSubmitted] = React.useState(false);\n  const questionId = `question__${questionIndex}`;\n  const isCorrect = selectedAlternative === question.answer;\n  const hasAlternativeSelected = selectedAlternative !== undefined;\n\n  return (\n    <Widget>\n      <Widget.Header>\n        {/* <BackLinkArrow href=\"/\" /> */}\n        <h3>\n          {`Pergunta ${questionIndex + 1} de ${totalQuestions}`}\n        </h3>\n      </Widget.Header>\n\n      <img\n        alt=\"Descrição\"\n        style={{\n          width: '100%',\n          height: '150px',\n          objectFit: 'cover',\n        }}\n        src={question.image}\n      />\n      <Widget.Content>\n        <h2>\n          {question.title}\n        </h2>\n        <p>\n          {question.description}\n        </p>\n\n        <form\n          onSubmit={(infosDoEvento) => {\n            infosDoEvento.preventDefault();\n            setIsQuestionSubmitted(true);\n            setTimeout(() => {\n              setIsQuestionSubmitted(false);\n              onSubmit();\n              setSelectedAlternative(undefined);\n            }, 3 * 1000);\n          }}\n        >\n          {question.alternatives.map((alternative, alternativeIndex) => {\n            const alternativeId = `alternative__${alternativeIndex}`;\n            return (\n              <Widget.Topic\n                as=\"label\"\n                key={alternativeId}\n                htmlFor={alternativeId}\n              >\n                <input\n                  // style={{ display: 'none' }}\n                  id={alternativeId}\n                  name={questionId}\n                  onChange={() => setSelectedAlternative(alternativeIndex)}\n                  type=\"radio\"\n                />\n                {alternative}\n              </Widget.Topic>\n            );\n          })}\n\n          {/* <pre>\n            {JSON.stringify(question, null, 4)}\n          </pre> */}\n          <Button type=\"submit\" disabled={!hasAlternativeSelected}>\n            Confirmar\n          </Button>\n          {isQuestionSubmitted && isCorrect && <p>Você acertou!</p>}\n          {isQuestionSubmitted && !isCorrect && <p>Você errou!</p>}\n        </form>\n      </Widget.Content>\n    </Widget>\n  );\n}\n\nconst screenStates = {\n  QUIZ: 'QUIZ',\n  LOADING: 'LOADING',\n  RESULT: 'RESULT',\n};\nexport default function QuizPage() {\n  const [screenState, setScreenState] = React.useState(screenStates.RESULT);\n  const [results, setResult] = React.useState([]);\n  const totalQuestions = db.questions.length;\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const questionIndex = currentQuestion;\n  const question = db.questions[questionIndex];\n\n  // [React chama de: Efeitos || Effects]\n  // React.useEffect\n  // atualizado === willUpdate\n  // morre === willUnmount\n  // nasce === didMount\n\n  React.useEffect(() => {\n    // fetch() ...\n    setTimeout(() => {\n      // setScreenState(screenStates.QUIZ);\n    }, 1 * 1000);\n  // nasce === didMount\n  }, []);\n\n  function handleSubmitQuiz() {\n    const nextQuestion = questionIndex + 1;\n    if (nextQuestion < totalQuestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setScreenState(screenStates.RESULT);\n    }\n  }\n\n  return (\n    <QuizBackground backgroundImage={db.bg}>\n      <QuizContainer>\n        <QuizLogo />\n        {screenState === screenStates.QUIZ && (\n          <QuestionWidget\n            question={question}\n            questionIndex={questionIndex}\n            totalQuestions={totalQuestions}\n            onSubmit={handleSubmitQuiz}\n          />\n        )}\n\n        {screenState === screenStates.LOADING && <LoadingWidget />}\n\n        {screenState === screenStates.RESULT && <ResultWidget />}\n\n        {screenState === screenStates.RESULT && <div>Você acertou X questões, parabéns!</div>}\n      </QuizContainer>\n    </QuizBackground>\n  );\n}"]},"metadata":{},"sourceType":"module"}